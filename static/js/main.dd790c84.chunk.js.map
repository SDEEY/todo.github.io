{"version":3,"sources":["store/Todo.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["tasks","tasksForFilter","makeAutoObservable","this","task","push","id","filter","taskId","isCompleted","map","completed","App","observer","onSubmit","e","preventDefault","title","target","value","Todo","addTask","length","type","onClick","showCompletedTasks","showUncompletedTasks","showAllTasks","className","onChange","completeTask","checked","deleteTask","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QA+Ce,M,WAhCX,aAAc,yBANdA,MAAoB,GAMP,KAFbC,eAA6B,GAGzBC,YAAmBC,M,2CAGvB,SAAQC,GACJD,KAAKH,MAAMK,KAAKD,GAChBD,KAAKF,eAAeI,KAAKD,K,wBAG7B,SAAWE,GACPH,KAAKH,MAAQG,KAAKH,MAAMO,QAAO,SAAAH,GAAI,OAAIA,EAAKE,KAAOA,KACnDH,KAAKF,eAAiBE,KAAKF,eAAeM,QAAO,SAAAH,GAAI,OAAIA,EAAKE,KAAOA,O,0BAGzE,SAAaE,EAAgBC,GACzBN,KAAKH,MAAQG,KAAKH,MAAMU,KAAI,SAAAN,GAAI,OAAIA,EAAKE,KAAOE,EAAZ,2BAAyBJ,GAAzB,IAA+BO,UAAWF,IAAeL,KAC7FD,KAAKF,eAAiBE,KAAKF,eAAeS,KAAI,SAAAN,GAAI,OAAIA,EAAKE,KAAOE,EAAZ,2BAAyBJ,GAAzB,IAA+BO,UAAWF,IAAeL,O,gCAGnH,WACID,KAAKH,MAAQG,KAAKF,eAAeM,QAAO,SAAAH,GAAI,OAAIA,EAAKO,e,kCAGzD,WACIR,KAAKH,MAAQG,KAAKF,eAAeM,QAAO,SAAAH,GAAI,OAAKA,EAAKO,e,0BAG1D,WACIR,KAAKH,MAAQG,KAAKF,mB,aCPXW,EA/BHC,aAAU,WAQpB,OACE,gCACE,uBAAMC,SATY,SAACC,GACrBA,EAAEC,iBAEF,IAAMC,EAAQF,EAAEG,OAAO,GAAGC,MAC1BC,EAAKC,QAAQ,CAACf,GAAIc,EAAKpB,MAAMsB,OAAS,EAAGL,MAAOA,EAAON,WAAW,KAKhE,UACE,uBAAOY,KAAK,SACZ,4CAEF,wBAAQC,QAAS,kBAAMJ,EAAKK,sBAA5B,uBACA,wBAAQD,QAAS,kBAAMJ,EAAKM,wBAA5B,yBACA,wBAAQF,QAAS,kBAAMJ,EAAKO,gBAA5B,iBACA,qBAAKC,UAAU,MAAf,SACCR,EAAKpB,MAAMU,KAAI,SAACN,GAAD,OACd,0CACMA,EAAKE,GADX,YACiBF,EAAKa,MADtB,KAEE,uBAAOY,SAAU,SAACd,GAAD,OAAOK,EAAKU,aAAa1B,EAAKE,GAAIS,EAAEG,OAAOa,UAAUR,KAAK,aAC3E,wBAAQC,QAAS,kBAAMJ,EAAKY,WAAW5B,EAAKE,KAA5C,sBAHQF,EAAKE,eCVR2B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dd790c84.chunk.js","sourcesContent":["import { makeAutoObservable } from \"mobx\";\r\n\r\nexport type TodoType = {\r\n    id: number;\r\n    title: string;\r\n    completed: boolean;\r\n}\r\n\r\nclass Todo {\r\n    tasks: TodoType[] = [\r\n        // {id:1, title: '', completed: false}, {id:2, title: '', completed: false}, {id:3, title: '', completed: false}\r\n    ]\r\n\r\n    tasksForFilter: TodoType[] = []\r\n\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    addTask(task: TodoType){\r\n        this.tasks.push(task)\r\n        this.tasksForFilter.push(task)\r\n    }\r\n\r\n    deleteTask(id: number){\r\n        this.tasks = this.tasks.filter(task => task.id !== id)\r\n        this.tasksForFilter = this.tasksForFilter.filter(task => task.id !== id)\r\n    }\r\n\r\n    completeTask(taskId: number, isCompleted: boolean){\r\n        this.tasks = this.tasks.map(task => task.id === taskId ? {...task, completed: isCompleted} : task)\r\n        this.tasksForFilter = this.tasksForFilter.map(task => task.id === taskId ? {...task, completed: isCompleted} : task)\r\n    }\r\n\r\n    showCompletedTasks(){\r\n        this.tasks = this.tasksForFilter.filter(task => task.completed)\r\n    }\r\n\r\n    showUncompletedTasks(){\r\n        this.tasks = this.tasksForFilter.filter(task => !task.completed)\r\n    }\r\n\r\n    showAllTasks(){\r\n        this.tasks = this.tasksForFilter\r\n    }\r\n}\r\n\r\nexport default new Todo();","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport './App.css';\nimport Todo, {TodoType} from './store/Todo';\n\nconst App = observer( () => {\n  const submitHandler = (e: any) => {\n    e.preventDefault()\n    \n    const title = e.target[0].value\n    Todo.addTask({id: Todo.tasks.length + 1, title: title, completed: false})\n  }\n\n  return (\n    <div>\n      <form onSubmit={submitHandler}>\n        <input type=\"text\"/>\n        <button>add</button>\n      </form>\n      <button onClick={() => Todo.showCompletedTasks()}>completed</button>\n      <button onClick={() => Todo.showUncompletedTasks()}>uncompleted</button>\n      <button onClick={() => Todo.showAllTasks()}>all</button>\n      <div className=\"App\">\n      {Todo.tasks.map((task: TodoType) => \n        <div key={task.id}>\n          {`${task.id} ${task.title} `}\n          <input onChange={(e) => Todo.completeTask(task.id, e.target.checked)} type=\"checkbox\" />\n          <button onClick={() => Todo.deleteTask(task.id)}>delete</button>\n        </div>\n      )}\n    </div>\n    </div>\n  );\n}\n)\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}