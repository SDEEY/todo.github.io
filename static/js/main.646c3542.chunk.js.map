{"version":3,"sources":["Components/Form/Form.module.scss","Components/ListOfTodos/ListOfTodos.module.scss","store/Todo.tsx","Components/Form/Form.tsx","Components/ListOfTodos/ListOfTodos.tsx","App.tsx","reportWebVitals.ts","index.tsx","App.module.scss"],"names":["module","exports","tasks","tasksForFilter","makeAutoObservable","this","task","push","id","filter","taskId","isCompleted","map","completed","Form","useState","inputValue","setInputValue","className","s","form","onSubmit","e","preventDefault","title","target","value","Todo","addTask","length","onChange","type","ListOfTodos","observer","listOfTodos","completeTask","checked","onClick","deleteTask","App","buttons","showCompletedTasks","showUncompletedTasks","showAllTasks","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wHACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,YAAc,mC,2JC8CjB,M,WAhCX,aAAc,yBANdC,MAAoB,GAMP,KAFbC,eAA6B,GAGzBC,YAAmBC,M,2CAGvB,SAAQC,GACJD,KAAKH,MAAMK,KAAKD,GAChBD,KAAKF,eAAeI,KAAKD,K,wBAG7B,SAAWE,GACPH,KAAKH,MAAQG,KAAKH,MAAMO,QAAO,SAAAH,GAAI,OAAIA,EAAKE,KAAOA,KACnDH,KAAKF,eAAiBE,KAAKF,eAAeM,QAAO,SAAAH,GAAI,OAAIA,EAAKE,KAAOA,O,0BAGzE,SAAaE,EAAgBC,GACzBN,KAAKH,MAAQG,KAAKH,MAAMU,KAAI,SAAAN,GAAI,OAAIA,EAAKE,KAAOE,EAAZ,2BAAyBJ,GAAzB,IAA+BO,UAAWF,IAAeL,KAC7FD,KAAKF,eAAiBE,KAAKF,eAAeS,KAAI,SAAAN,GAAI,OAAIA,EAAKE,KAAOE,EAAZ,2BAAyBJ,GAAzB,IAA+BO,UAAWF,IAAeL,O,gCAGnH,WACID,KAAKH,MAAQG,KAAKF,eAAeM,QAAO,SAAAH,GAAI,OAAIA,EAAKO,e,kCAGzD,WACIR,KAAKH,MAAQG,KAAKF,eAAeM,QAAO,SAAAH,GAAI,OAAKA,EAAKO,e,0BAG1D,WACIR,KAAKH,MAAQG,KAAKF,mB,sCCjBXW,EAtBF,WAAO,IAAD,EACqBC,mBAAS,IAD9B,mBACRC,EADQ,KACIC,EADJ,KAcf,OACI,uBAAMC,UAAWC,IAAEC,KAAMC,SAZP,SAACC,GAGnB,GAFAA,EAAEC,iBAEEP,EAAJ,CAEA,IAAMQ,EAAQF,EAAEG,OAAO,GAAGC,MAE1BC,EAAKC,QAAQ,CAACpB,GAAImB,EAAKzB,MAAM2B,OAAS,EAAGL,MAAOA,EAAOX,WAAW,IAClEI,EAAc,MAId,UACI,uBAAOS,MAAOV,EAAYc,SAAU,SAACR,GAAD,OAAOL,EAAcK,EAAEG,OAAOC,QAAQK,KAAK,SAC/E,6C,iBCFGC,EAfKC,aAAS,WACzB,OACI,qBAAKf,UAAWC,IAAEe,YAAlB,SACKP,EAAKzB,MAAMU,KAAI,SAACN,GAAD,OACZ,0CACQA,EAAKE,GADb,YACmBF,EAAKkB,MADxB,KAEI,uBAAOM,SAAU,SAACR,GAAD,OAAOK,EAAKQ,aAAa7B,EAAKE,GAAIc,EAAEG,OAAOW,UAAUL,KAAK,aAC3E,wBAAQM,QAAS,kBAAMV,EAAKW,WAAWhC,EAAKE,KAA5C,sBAHMF,EAAKE,YCehB+B,EAhBHN,aAAS,WACjB,OACI,gCACI,cAAC,EAAD,IACA,sBAAKf,UAAWC,IAAEqB,QAAlB,UACI,wBAAQH,QAAS,kBAAMV,EAAKc,sBAA5B,uBACA,wBAAQJ,QAAS,kBAAMV,EAAKe,wBAA5B,yBACA,wBAAQL,QAAS,kBAAMV,EAAKgB,gBAA5B,oBAEJ,8BACI,cAAC,EAAD,YCHDC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfA5C,EAAOC,QAAU,CAAC,QAAU,wB","file":"static/js/main.646c3542.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__1J_w9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listOfTodos\":\"ListOfTodos_listOfTodos__2BNxE\"};","import { makeAutoObservable } from \"mobx\";\r\n\r\nexport type TodoType = {\r\n    id: number;\r\n    title: string;\r\n    completed: boolean;\r\n}\r\n\r\nclass Todo {\r\n    tasks: TodoType[] = [\r\n        // {id:1, title: '', completed: false}, {id:2, title: '', completed: false}, {id:3, title: '', completed: false}\r\n    ]\r\n\r\n    tasksForFilter: TodoType[] = []\r\n\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    addTask(task: TodoType){\r\n        this.tasks.push(task)\r\n        this.tasksForFilter.push(task)\r\n    }\r\n\r\n    deleteTask(id: number){\r\n        this.tasks = this.tasks.filter(task => task.id !== id)\r\n        this.tasksForFilter = this.tasksForFilter.filter(task => task.id !== id)\r\n    }\r\n\r\n    completeTask(taskId: number, isCompleted: boolean){\r\n        this.tasks = this.tasks.map(task => task.id === taskId ? {...task, completed: isCompleted} : task)\r\n        this.tasksForFilter = this.tasksForFilter.map(task => task.id === taskId ? {...task, completed: isCompleted} : task)\r\n    }\r\n\r\n    showCompletedTasks(){\r\n        this.tasks = this.tasksForFilter.filter(task => task.completed)\r\n    }\r\n\r\n    showUncompletedTasks(){\r\n        this.tasks = this.tasksForFilter.filter(task => !task.completed)\r\n    }\r\n\r\n    showAllTasks(){\r\n        this.tasks = this.tasksForFilter\r\n    }\r\n}\r\n\r\nexport default new Todo();","import React, {useState} from 'react';\r\nimport s from './Form.module.scss'\r\nimport Todo from \"../../store/Todo\";\r\n\r\nconst Form = () => {\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const submitHandler = (e: any) => {\r\n        e.preventDefault()\r\n\r\n        if(!inputValue) return\r\n\r\n        const title = e.target[0].value\r\n\r\n        Todo.addTask({id: Todo.tasks.length + 1, title: title, completed: false})\r\n        setInputValue('')\r\n    }\r\n\r\n    return (\r\n        <form className={s.form} onSubmit={submitHandler}>\r\n            <input value={inputValue} onChange={(e) => setInputValue(e.target.value)} type=\"text\"/>\r\n            <button>add</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Form;","import Todo, {TodoType} from \"../../store/Todo\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport s from './ListOfTodos.module.scss'\r\n\r\nconst ListOfTodos = observer(() => {\r\n    return (\r\n        <div className={s.listOfTodos}>\r\n            {Todo.tasks.map((task: TodoType) =>\r\n                <div key={task.id}>\r\n                    {`${task.id} ${task.title} `}\r\n                    <input onChange={(e) => Todo.completeTask(task.id, e.target.checked)} type=\"checkbox\" />\r\n                    <button onClick={() => Todo.deleteTask(task.id)}>delete</button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n)\r\n\r\nexport default ListOfTodos;","import {observer} from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport s from './App.module.scss';\r\nimport Todo from './store/Todo';\r\nimport Form from \"./Components/Form/Form\";\r\nimport ListOfTodos from \"./Components/ListOfTodos/ListOfTodos\";\r\n\r\nconst App = observer(() => {\r\n    return (\r\n        <div>\r\n            <Form />\r\n            <div className={s.buttons}>\r\n                <button onClick={() => Todo.showCompletedTasks()}>completed</button>\r\n                <button onClick={() => Todo.showUncompletedTasks()}>uncompleted</button>\r\n                <button onClick={() => Todo.showAllTasks()}>all</button>\r\n            </div>\r\n            <div>\r\n                <ListOfTodos/>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"App_buttons__2BTnV\"};"],"sourceRoot":""}